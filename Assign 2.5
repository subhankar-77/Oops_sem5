public class Date {
    private int day;
    private int month;
    private int year;

    private static final int[] DAYS_IN_MONTH = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

    public Date() {
        this.day = 1;
        this.month = 1;
        this.year = 1800;
    }

    public Date(int day, int month, int year) {
        if (!isValidDate(day, month, year)) {
            System.out.println("Invalid date. Setting to default date 01/01/1800.");
            this.day = 1;
            this.month = 1;
            this.year = 1800;
        } else {
            this.day = day;
            this.month = month;
            this.year = year;
        }
    }

    public int getDay() {
        return day;
    }

    public int getMonth() {
        return month;
    }

    public int getYear() {
        return year;
    }

    public void setDate(int day, int month, int year) {
        if (!isValidDate(day, month, year)) {
            System.out.println("Invalid date. No changes were made.");
        } else {
            this.day = day;
            this.month = month;
            this.year = year;
        }
    }

    private boolean isLeapYear(int year) {
        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    }

    private boolean isValidDate(int d, int m, int y) {
        if (y < 1800 || m < 1 || m > 12 || d < 1) {
            return false;
        }
        int maxDays = DAYS_IN_MONTH[m];
        if (m == 2 && isLeapYear(y)) {
            maxDays = 29;
        }
        return d <= maxDays;
    }

    @Override
    public String toString() {
        return String.format("%02d/%02d/%04d", day, month, year);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Date other = (Date) obj;
        return day == other.day && month == other.month && year == other.year;
    }

    private int countDaysSinceEpoch() {
        int totalDays = 0;
        for (int y = 1800; y < this.year; y++) {
            totalDays += isLeapYear(y) ? 366 : 365;
        }
        for (int m = 1; m < this.month; m++) {
            totalDays += DAYS_IN_MONTH[m];
            if (m == 2 && isLeapYear(this.year)) {
                totalDays++;
            }
        }
        totalDays += this.day;
        return totalDays;
    }

    public int differenceInDays(Date other) {
        return Math.abs(this.countDaysSinceEpoch() - other.countDaysSinceEpoch());
    }
    
    private void setDateFromDays(int totalDays) {
        this.year = 1800;
        while (totalDays > (isLeapYear(this.year) ? 366 : 365)) {
            totalDays -= isLeapYear(this.year) ? 366 : 365;
            this.year++;
        }

        this.month = 1;
        while (true) {
            int daysInCurrentMonth = DAYS_IN_MONTH[this.month];
            if (this.month == 2 && isLeapYear(this.year)) {
                daysInCurrentMonth = 29;
            }
            if (totalDays <= daysInCurrentMonth) {
                break;
            }
            totalDays -= daysInCurrentMonth;
            this.month++;
        }
        this.day = totalDays;
    }

    public void addDays(int n) {
        if (n < 0) return;
        int totalDays = this.countDaysSinceEpoch() + n;
        setDateFromDays(totalDays);
    }
    
    public void subtractDays(int n) {
        if (n < 0) return;
        int totalDays = this.countDaysSinceEpoch() - n;
        if (totalDays < 1) {
             System.out.println("Resulting date is before 01/01/1800. No changes were made.");
             return;
        }
        setDateFromDays(totalDays);
    }
}